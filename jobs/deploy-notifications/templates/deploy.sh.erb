#!/bin/bash -exu

export PATH="/var/vcap/packages/cf_cli/bin:/var/vcap/packages/jq/bin:$PATH"
export CF_HOME=`pwd`/home/cf

SCHEME=https
DOMAIN=<%= properties.domain %>
ADMIN_USER=<%= properties.notifications.cf.admin_user %>
ADMIN_PASSWORD=<%= properties.notifications.cf.admin_password %>
API_ENDPOINT=$SCHEME://api.$DOMAIN
ORG=<%= properties.notifications.organization %>
SPACE=<%= properties.notifications.space %>
APP_NAME=notifications
APP_DOMAIN=<%= properties.notifications.app_domain %>
DEFAULT_TEMPLATE=<%= properties.notifications.default_template.lines("\n").map(&:strip).join.inspect %>
UAA_ADMIN_CLIENT=<%= properties.notifications.uaa.admin_client_id %>
UAA_ADMIN_SECRET=<%= properties.notifications.uaa.admin_client_secret %>
SYSLOG_URL="<%= properties.notifications.syslog_url %>"
MANIFEST=/var/vcap/jobs/deploy-notifications/manifest.yml

mkdir -p $CF_HOME

function validate_database_connection_count() {
  if [[ "<%= properties.notifications.database.max_open_connections %>" -eq "0" ]]; then
    echo "The database max_open_connections value cannot be unlimited"
    exit 1
  fi

  if (( "<%= properties.notifications.database.max_open_connections %>" < "<%= properties.notifications.instance_count %>" )); then
    echo "The database max_open_connections value must be greater than instance_count value"
    exit 1
  fi
}

function validate_smtp_config() {
  warning_message="The notifications service was not deployed because SMTP host or port is missing"
  if [[ -z "<%= properties.notifications.smtp.host %>" ]]; then
    echo $warning_message
    exit 1
  fi

  if [[ -z "<%= properties.notifications.smtp.port %>" ]]; then
    echo $warning_message
    exit 1
  fi
}

function authenticate_and_target() {
  cf api $API_ENDPOINT <% if properties.ssl.skip_cert_verify %>--skip-ssl-validation<% end %>
  cf auth $ADMIN_USER $ADMIN_PASSWORD
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_manifest() {
  cat $MANIFEST
  cp $MANIFEST /var/vcap/packages/notifications/manifest.yml
}

function create_logging_service() {
  local LOGGER_NAME=$APP_NAME-logger
  set +e
    cf service $LOGGER_NAME --guid
    local exit_code=$?
  set -e

  if [[ -z "$SYSLOG_URL" ]]; then
    echo "Syslog URL is not set."

    if [[ $exit_code -eq 0 ]]; then
      cf delete-service $LOGGER_NAME -f
    fi

    return
  fi


  if [[ $exit_code -ne 0 ]]; then
    cf create-user-provided-service $LOGGER_NAME -l $SYSLOG_URL
  else
    cf update-user-provided-service $LOGGER_NAME -l $SYSLOG_URL
  fi

  cf bind-service $APP_NAME $LOGGER_NAME
}

function push_app() {
  pushd /var/vcap/packages/notifications > /dev/null
    mkdir -p /var/vcap/data/tmp
    export TMPDIR=/var/vcap/data/tmp

    set +e
      cf app $APP_NAME --guid
      local exit_code=$?
    set -e

    if [[ $exit_code -ne 0 ]]; then
      cf push -i 1
    else
      cf install-plugin /var/vcap/packages/cf_cli/plugins/autopilot
      cf zero-downtime-push $APP_NAME -f manifest.yml -p .
    fi
  popd > /dev/null
}

function scale_app_down() {
  set +e
    cf app $APP_NAME --guid
    local exit_code=$?
  set -e

  if [[ $exit_code -eq 0 ]]; then
    cf scale $APP_NAME -i 1
  fi
}

function scale_app_up() {
  cf scale $APP_NAME -i <%= properties.notifications.instance_count %>
}

function set_default_template() {
  if [[ -z "$DEFAULT_TEMPLATE" ]]; then
    echo "Default template is not set."
    return
  fi

  TEMP_CLIENT=template-setter-$RANDOM
  TEMP_PASS=temp-secret-$RANDOM

  admin_token=$(curl $SCHEME://$UAA_ADMIN_CLIENT:$UAA_ADMIN_SECRET@uaa.$DOMAIN/oauth/token -d "grant_type=client_credentials" -kv | jq -r '.access_token')

  curl -k -H "Authorization: Bearer $admin_token" -X DELETE $SCHEME://uaa.$DOMAIN/oauth/clients/$TEMP_CLIENT

  touch curl.log

  cat << EOF >tempfile
{
  "client_id" : "$TEMP_CLIENT",
  "client_secret" : "$TEMP_PASS",
  "scope" : ["openid"],
  "resource_ids" : ["none"],
  "authorities" : ["openid", "notification_templates.write"],
  "authorized_grant_types" : ["client_credentials"],
  "access_token_validity": 43200
}
EOF
  status=$(curl -k -v -so ./curl.log -w '%{response_code}' -H 'Content-Type: application/json' -H "Authorization: Bearer $admin_token" -X POST $SCHEME://uaa.$DOMAIN/oauth/clients -d @tempfile)
  if [[ "$status" != "201" ]]; then
    echo "Could not create a temporary user for template setting: received $status"
    cat curl.log
    exit 187
  fi

  temp_client_token=$(curl $SCHEME://$TEMP_CLIENT:$TEMP_PASS@uaa.$DOMAIN/oauth/token -d "grant_type=client_credentials" -kv | jq -r '.access_token')

  status=$(curl -i -k -v -so ./curl.log -w '%{response_code}' -X PUT -H "Authorization: Bearer $temp_client_token" $SCHEME://$APP_NAME.$DOMAIN/default_template -d "$DEFAULT_TEMPLATE")

  curl -k -H "Authorization: Bearer $admin_token" -X DELETE $SCHEME://uaa.$DOMAIN/oauth/clients/$TEMP_CLIENT

  if [[ "$status" != "204" ]]; then
    echo "The default template could not be set: received $status"
    cat curl.log
    exit 187
  fi
}

cf -v

validate_database_connection_count
validate_smtp_config
authenticate_and_target
create_manifest
scale_app_down
push_app
create_logging_service
scale_app_up
set_default_template
